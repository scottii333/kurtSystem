<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
  <script src="/socket.io/socket.io.js"></script>
</head>
<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    scroll-behavior: smooth;
  }

  body {
    font-family: "Arial", sans-serif;
    position: relative;
  }

  nav {
    display: flex;
    justify-content: space-around;
    align-items: center;
    position: sticky;
    margin-top: 1rem;
    width: 96%;
    top: 0;
    z-index: 1000;
    margin-left: 2%;
    border-radius: 0.5rem;
  }

  nav div {
    margin: 1rem;
  }

  #navBtn {
    background-color: #e36906;
    display: flex;
    border: none;
    border-radius: 5rem;
    padding: 0.5rem 4rem;
    gap: 2rem;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1), 0 6px 20px rgba(0, 0, 0, 0.1);
  }

  #navBtn button {
    color: white;
  }

  nav button {
    padding: 0.5rem;
    cursor: pointer;
    font-size: 1.2rem;
    background-color: transparent;
    border: none;
  }

  #main {
    display: flex;
    width: 100%;
    height: auto;
    justify-content: center;
    flex-wrap: wrap;
  }

  #ProductSection {
    display: flex;
    flex-wrap: wrap;
    background-color: #fff3e9;
    height: auto;
    width: 50rem;
    border-radius: 1rem;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1), 0 6px 20px rgba(0, 0, 0, 0.1);
  }

  .prodTable {
    margin: 1rem;
    width: 48rem;
    height: 18rem;
    overflow-y: auto;
  }

  table {
    width: 96%;
    height: 15rem;
    border-collapse: collapse;
    margin: 1rem 1rem;
  }

  th,
  td {
    padding: 1rem;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }

  th {
    background-color: #f4f4f4;
  }

  tr:hover {
    background-color: #f1f1f1;
  }

  .prodInputDiv {
    margin: 2rem;
    display: flex;
    flex-wrap: wrap;
    width: 45rem;
    height: auto;
    text-align: center;
  }

  .inventoryFile {
    width: 10rem;
    height: auto;
    margin-bottom: 1rem;
    text-align: center;
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
  }

  #imagePreview {
    height: 7rem;
    width: 7rem;
    margin: 0.5rem;
    align-content: center;
    border: 1px solid #ddd;
    border-radius: 0.8rem;
    padding: 0.2rem;
  }

  #OrderSection {
    display: none;
    background-color: #fff3e9;
    height: 35rem;
    width: 50rem;
    border-radius: 1rem;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1), 0 6px 20px rgba(0, 0, 0, 0.1);
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
  }

  .deliveredTable {
    margin: 1rem;
    width: 48rem;
    height: 25rem;
    /* Changed height to 25rem */
    overflow-y: auto;
  }

  .deliveredTable table {
    width: 96%;
    height: 100%;
    /* Adjusted height to 100% to fit the container */
    border-collapse: collapse;
    margin: 1rem 1rem;
  }

  .deliveredTable th,
  .deliveredTable td {
    padding: 1rem;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }

  .deliveredTable th {
    background-color: #f4f4f4;
  }

  .deliveredTable tr:hover {
    background-color: #f1f1f1;
  }

  #SuccessSection {
    display: none;
    background-color: #fff3e9;
    height: 35rem;
    width: 50rem;
    border-radius: 1rem;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1), 0 6px 20px rgba(0, 0, 0, 0.1);
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    overflow-y: scroll;
  }
</style>

<body>
  <nav>
    <div>
      <a href="#mainImgDiv"><img src="/icons/bola.png.png" width="50rem" /></a>
    </div>
    <div id="navBtn">
      <button onclick="manageBtn()">Manage Products</button>
      <button onclick="orderBtn()">Order Details</button>
      <button onclick="SuccessBtn()">Order successful</button>
    </div>
  </nav>

  <main id="main">
    <section id="ProductSection">
      <div class="prodTable">
        <table>
          <thead>
            <tr>
              <th>Shoes Name</th>
              <th>Category</th>
              <th>Size</th>
              <th>Price</th>
              <th>Stock</th>
              <th>Date</th>
            </tr>
          </thead>
          <tbody id="tableData"></tbody>
        </table>
      </div>
      <div class="prodInputDiv">
        <div class="prodInput">
          <input id="productName" type="text" style="margin: 1rem" placeholder="Shoe name" maxlength="15" />
        </div>
        <div class="prodInput">
          <select id="category" style="margin: 1rem">
            <option value="" disabled selected>Select an Category</option>
            <option value="men">Men</option>
            <option value="women">Woman</option>
            <option value="kids">Kids</option>
          </select>
        </div>
        <div class="prodInput">
          <input id="size" type="text" style="margin: 1rem" placeholder="Size" maxlength="2" />
        </div>
        <div class="prodInput">
          <input id="price" type="text" style="margin: 1rem" placeholder="Price" maxlength="6" />
        </div>
        <div class="prodInput">
          <input id="stock" type="text" style="margin: 1rem" placeholder="Stock" maxlength="3" />
        </div>

        <div class="prodInput">
          <label id="imageUpload" for="fileInput">Upload Image</label>

          <div id="imagePreview"></div>

          <input type="file" style="width: 5.5rem" id="fileInput" accept="image/*" />
        </div>

        <div class="prodInput">
          <button onclick="addProduct()">Add Product</button>
        </div>
      </div>
    </section>

    <section id="OrderSection"></section>

    <section id="SuccessSection">
      <div class="deliveredTable">
        <table>
          <thead>
            <tr>
              <th>Order ID</th>
              <th>Product Name</th>
              <th>Quantity</th>
              <th>Subtotal</th>
              <th>Date</th>
            </tr>
          </thead>
          <tbody id="successTableBody">
            <!-- Delivered orders will be appended here -->
          </tbody>
        </table>
      </div>


    </section>
  </main>

  <script>
    document.addEventListener("DOMContentLoaded", fetchOrderHistoryAndDisplay);

    async function fetchOrderHistoryAndDisplay() {
      try {
        const response = await fetch("/order_history"); // Assuming your endpoint is '/order_history'
        const orderHistory = await response.json();

        const tableBody = document.getElementById("successTableBody");
        orderHistory.forEach(order => {
          const dateAdded = new Date(order.DateAdded);
          const formattedDate = `${dateAdded.getFullYear()}-${(dateAdded.getMonth() + 1).toString().padStart(2, '0')}-${dateAdded.getDate().toString().padStart(2, '0')}`;

          const newRow = document.createElement("tr");
          newRow.innerHTML = `
        <td>${order.ID}</td>
        <td>${order.ProductName}</td>
        <td>${order.Quantity}</td>
        <td>â‚±${order.Subtotal.toFixed(2)}</td>
        <td>${formattedDate}</td>
      `;
          tableBody.appendChild(newRow);
        });
      } catch (error) {
        console.error('Error fetching and displaying order history:', error);
      }
    }

    document.addEventListener("DOMContentLoaded", fetchProductsAndDisplay);


    async function fetchProductsAndDisplay() {
      try {
        const response = await fetch("/shoes_products");
        const products = await response.json();


        const tableData = document.getElementById("tableData");


        products.forEach(product => {

          const dateAdded = new Date(product.DateAdded);

          const formattedDate = `${dateAdded.getFullYear()}-${(dateAdded.getMonth() + 1).toString().padStart(2, '0')}-${dateAdded.getDate().toString().padStart(2, '0')}`;





          const newRow = document.createElement("tr");
          newRow.innerHTML = `
        <td>${product.ProductName}</td>
        <td>${product.Category}</td>
        <td>${product.Size}</td>
        <td>${product.Price}</td>
        <td>${product.Stock}</td>
        <td>${formattedDate}</td>
      `;
          tableData.appendChild(newRow);
        });
      } catch (error) {
        console.error('Error fetching and displaying products:', error);

      }
    }


    document
      .getElementById("fileInput")
      .addEventListener("change", function (event) {
        const file = event.target.files[0];
        const preview = document.getElementById("imagePreview");

        preview.innerHTML = "";

        if (file) {
          const reader = new FileReader();

          reader.onload = function (e) {
            const img = document.createElement("img");
            img.src = e.target.result;
            img.style.maxWidth = "80%";
            img.style.height = "auto";
            preview.appendChild(img);
          };

          reader.readAsDataURL(file);
        }
      });

    const socket = io();

    function addProduct() {
      const productName = document.getElementById("productName").value;
      const category = document.getElementById("category").value;
      const size = document.getElementById("size").value;
      const price = document.getElementById("price").value;
      const stock = document.getElementById("stock").value;
      const fileInput = document.getElementById("fileInput");
      const file = fileInput.files[0];
      const date = new Date().toLocaleDateString();
      const preview = document.getElementById("imagePreview");

      if (!productName || !category || !size || !price || !stock || !file) {
        alert("Please fill in all fields and upload an image.");
        return;
      }

      const tableData = document.getElementById("tableData");

      const rows = tableData.getElementsByTagName("tr");
      for (let i = 0; i < rows.length; i++) {
        const cells = rows[i].getElementsByTagName("td");
        if (cells[0].textContent === productName) {
          alert("Product name already exists. Please enter a new name.");
          return;
        }
      }
      const newRow = document.createElement("tr");

      newRow.innerHTML = `
    <td>${productName}</td>
    <td>${category}</td>
    <td>${size}</td>
    <td>${price}</td>
    <td>${stock}</td>
    <td>${date}</td>
  `;

      tableData.appendChild(newRow);

      const productData = {
        productName,
        category,
        size,
        price,
        stock,
        date
      };

      const reader = new FileReader();
      reader.onload = function (e) {
        productData.image = e.target.result;

        socket.emit('newProduct', productData);

        console.log('Product added successfully');
      };
      reader.readAsDataURL(file);


      document.getElementById("productName").value = "";
      document.getElementById("category").value = "";
      document.getElementById("size").value = "";
      document.getElementById("price").value = "";
      document.getElementById("stock").value = "";
      fileInput.value = "";
      preview.innerHTML = "";
    }


    socket.on('newCustomerOrder', (orderData) => {
      console.log('New Customer Order:', orderData);
      displayCustomerOrder(orderData);
    });


    function displayCustomerOrder(orderData) {

      const OrderSection = document.querySelector('#OrderSection');
      const customerOrderDiv = document.createElement('div');
      customerOrderDiv.style.border = '1px solid #ccc';
      customerOrderDiv.style.borderRadius = '5px';
      customerOrderDiv.style.padding = '10px';
      customerOrderDiv.style.marginBottom = '20px';
      customerOrderDiv.style.width = '300px';
      customerOrderDiv.style.marginRight = "10px";
      customerOrderDiv.style.display = "flex";
      customerOrderDiv.style.alignItems = "center";
      customerOrderDiv.style.flexDirection = "column";
      customerOrderDiv.style.flexWrap = "wrap";
      customerOrderDiv.style.overflowY = 'auto';

      const totalSubtotal = orderData.totalSubtotal + 100;

      const orderId = generateOrderId();

      customerOrderDiv.innerHTML = `
        <h2>Order Details</h2>
        <p><strong>Name:</strong> ${orderData.userDetails.name}</p>
        <p><strong>Delivery Address:</strong> ${orderData.userDetails.deliveryAddress}</p>
        <p><strong>Contact Number:</strong> ${orderData.userDetails.contactNumber}</p>
        <p><strong>Payment Method:</strong> ${orderData.userDetails.paymentMethod}</p>
        <h3>Products</h3>
        <ul>
          ${orderData.products.map(product => `
            <li>
              <p><strong>Product Name:</strong> ${product.productName}</p>
              <p><strong>Quantity:</strong> ${product.quantity}</p>
              <p><strong>Subtotal:</strong> â‚±${product.subtotal.toFixed(2)}</p>
            </li>
          `).join('')}
        </ul>
        <p><strong>Total Subtotal:</strong> â‚±${totalSubtotal.toFixed(2)}</p>
        <button class="order-delivered-btn">Order Delivered</button>
      `;

      OrderSection.appendChild(customerOrderDiv);

      const orderDeliveredBtn = customerOrderDiv.querySelector('.order-delivered-btn');
      orderDeliveredBtn.addEventListener('click', () => {
        alert(`Customer Order ${orderId} has been delivered, We will send a SMS notification to the customer provided number`);
        addOrderToSuccessSection(orderId, orderData.products);
        OrderSection.removeChild(customerOrderDiv);
      });

    }

    function generateOrderId() {
      const successTableBody = document.getElementById('successTableBody');
      let maxOrderId = 0;


      successTableBody.querySelectorAll('tr').forEach(row => {
        const orderId = parseInt(row.querySelector('td:first-child').textContent);
        if (!isNaN(orderId) && orderId > maxOrderId) {
          maxOrderId = orderId;
        }
      });


      return maxOrderId + 1;
    }


    async function addOrderToSuccessSection(orderId, products) {
      const successTableBody = document.getElementById('successTableBody');
      const currentDate = new Date().toISOString().slice(0, 10);

      products.forEach(async (product, index) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
      <td>${orderId}</td>
      <td>${product.productName}</td>
      <td>${product.quantity}</td>
      <td>â‚±${product.subtotal.toFixed(2)}</td>
      <td>${currentDate}</td> <!-- Add today's date -->
    `;
        successTableBody.appendChild(tr);

        const orderDetails = {
          productName: product.productName,
          quantity: product.quantity,
          subtotal: product.subtotal,
          date: currentDate
        };

        try {
          // Emit order details to the server via Socket.IO
          socket.emit('orderSuccess', orderDetails);
          // Deduct ordered quantity from stock in Shoes_Products table
          await deductFromStock(orderDetails.productName, orderDetails.quantity);
        } catch (err) {
          console.error('Error sending order details to the server:', err);
        }


      });
    }

    async function deductFromStock(productName, quantity) {
      try {
        const response = await fetch(`/deduct_stock/${productName}/${quantity}`, { method: 'PUT' });
        if (response.ok) {
          console.log('Stock updated successfully');
        } else {
          console.error('Failed to update stock:', response.statusText);
        }
      } catch (error) {
        console.error('Error deducting from stock:', error);
      }
    }



  </script>



  <script>
    function manageBtn() {
      const ProductSection = document.querySelector("#ProductSection");
      const OrderSection = document.querySelector("#OrderSection");
      const SuccessSection = document.querySelector("#SuccessSection");

      OrderSection.style.display = "none";

      SuccessSection.style.display = "none";

      ProductSection.style.display = "flex";
    }

    function orderBtn() {
      const ProductSection = document.querySelector("#ProductSection");
      const OrderSection = document.querySelector("#OrderSection");
      const SuccessSection = document.querySelector("#SuccessSection");

      ProductSection.style.display = "none";

      SuccessSection.style.display = "none";

      OrderSection.style.display = "flex";
    }

    function SuccessBtn() {
      const ProductSection = document.querySelector("#ProductSection");
      const OrderSection = document.querySelector("#OrderSection");
      const SuccessSection = document.querySelector("#SuccessSection");

      ProductSection.style.display = "none";

      OrderSection.style.display = "none";

      SuccessSection.style.display = "flex";
    }
  </script>
</body>

</html>